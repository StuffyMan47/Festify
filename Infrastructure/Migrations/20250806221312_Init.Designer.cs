// <auto-generated />
using System;
using Infrastructure.DAL.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806221312_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.DAL.Tables.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Newlyweds")
                        .HasColumnType("text")
                        .HasColumnName("newlyweds");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long>("PhotoId")
                        .HasColumnType("bigint")
                        .HasColumnName("photo_id");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("place_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WelcomeSpeech")
                        .HasColumnType("text")
                        .HasColumnName("welcome_speech");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("event", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Alcohol")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("alcohol");

                    b.Property<string>("CoupleName")
                        .HasColumnType("text")
                        .HasColumnName("couple_name");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<bool?>("IsCome")
                        .HasColumnType("boolean")
                        .HasColumnName("is_come");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer")
                        .HasColumnName("message_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("NeedTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("need_transfer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("guest", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("image", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_name");

                    b.HasKey("Id");

                    b.ToTable("owner", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Place", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("place", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("schedule", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("BannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("banned_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("InvitedById")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<int>("SystemRole")
                        .HasColumnType("integer")
                        .HasColumnName("system_role");

                    b.HasKey("Id");

                    b.HasIndex("InvitedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_token", "public");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Event", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Owner", null)
                        .WithMany("Events")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Infrastructure.DAL.Tables.Image", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.DAL.Tables.Place", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.DAL.Tables.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Guest", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Image", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Place", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Owner", null)
                        .WithMany("Places")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Schedule", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Event", "Event")
                        .WithMany("Schedule")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Users.User", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Users.User", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedById");

                    b.HasOne("Infrastructure.DAL.Tables.Owner", null)
                        .WithMany("Users")
                        .HasForeignKey("OwnerId");

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Users.UserToken", b =>
                {
                    b.HasOne("Infrastructure.DAL.Tables.Users.User", null)
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Event", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Owner", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Places");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Place", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Infrastructure.DAL.Tables.Users.User", b =>
                {
                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
